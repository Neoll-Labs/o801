/*
 * O801 API
 *
 * Create and Get User
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"log"
	"net/http"
	"strings"
)

// ServicesAPIController binds http requests to an api service and writes the service results to the http response
type ServicesAPIController struct {
	service      ServicesAPIServicer
	errorHandler ErrorHandler
}

// ServicesAPIOption for how the controller is set up.
type ServicesAPIOption func(*ServicesAPIController)

// WithServicesAPIErrorHandler inject ErrorHandler into controller.
func WithServicesAPIErrorHandler(h ErrorHandler) ServicesAPIOption {
	return func(c *ServicesAPIController) {
		c.errorHandler = h
	}
}

// NewServicesAPIController creates a default api controller.
func NewServicesAPIController(s ServicesAPIServicer, opts ...ServicesAPIOption) Router {
	controller := &ServicesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ServicesAPIController.
func (c *ServicesAPIController) Routes() Routes {
	return Routes{
		"CreateUser": Route{
			strings.ToUpper("Post"),
			"/users",
			c.CreateUser,
		},
		"GetUser": Route{
			strings.ToUpper("Get"),
			"/users/",
			c.GetUser,
		},
	}
}

// CreateUser handler.
func (c *ServicesAPIController) CreateUser(w http.ResponseWriter, r *http.Request) {
	if r.Method != "POST" {
		c.errorHandler(w, r, &MethodNotAllowedError{}, nil)
		return
	}

	createUserReq := struct {
		Name string `json:"Name"` // the json field is with camel case to keep compatibility
	}{}

	if err := json.NewDecoder(r.Body).Decode(&createUserReq); err != nil {
		log.Println("error parsing json id request: %w", err)
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if createUserReq.Name == "" {
		log.Println("empty name")
		c.errorHandler(w, r, nil, &ImplResponse{Code: http.StatusBadRequest})
		return
	}

	result, err := c.service.CreateUser(r.Context(), createUserReq.Name)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetUser handler.
func (c *ServicesAPIController) GetUser(w http.ResponseWriter, r *http.Request) {
	if r.Method != "GET" {
		c.errorHandler(w, r, &MethodNotAllowedError{}, nil)
		return
	}

	path := strings.Split(r.URL.Path, "/")
	idParam, err := parseNumericParameter[float32](
		path[2], // "id"
		WithRequire[float32](parseFloat32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.GetUser(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
