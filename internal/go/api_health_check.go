/*
 license x
*/

/*
 * O801 API
 *
 * Create and Get User
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"net/http"
	"strings"
)

// HealthCheckAPIController binds http requests to an api service and writes the service results to the http response
type HealthCheckAPIController struct {
	service      HealthCheckAPIServicer
	errorHandler ErrorHandler
}

// HealthCheckAPIOption for how the controller is set up.
type HealthCheckAPIOption func(*HealthCheckAPIController)

// NewHealthCheckAPIController creates a default api controller
func NewHealthCheckAPIController(s HealthCheckAPIServicer, opts ...HealthCheckAPIOption) Router {
	controller := &HealthCheckAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the HealthCheckAPIController
func (c *HealthCheckAPIController) Routes() Routes {
	return Routes{
		"HealthGet": Route{
			strings.ToUpper("Get"),
			"/health",
			c.HealthGet,
		},
		"LivenessGet": Route{
			strings.ToUpper("Get"),
			"/liveness",
			c.LivenessGet,
		},
	}
}

// HealthGet - Returns the health of the service.
func (c *HealthCheckAPIController) HealthGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.HealthGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}

	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// LivenessGet - Returns whether it is currently operational and responsive.
func (c *HealthCheckAPIController) LivenessGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.LivenessGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}

	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
